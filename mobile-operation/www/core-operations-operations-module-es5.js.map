{"version":3,"sources":["webpack:///src/app/core/operations/operations.page.html","webpack:///src/app/core/operations/operations-routing.module.ts","webpack:///src/app/core/operations/operations.module.ts","webpack:///src/app/core/operations/operations.page.scss","webpack:///src/app/core/operations/operations.page.ts"],"names":["routes","path","component","OperationsPageRoutingModule","imports","forChild","exports","OperationsPageModule","declarations","OperationsPage","hotspot","scannedWifis","isEmpty","isSearching","iconEmpty","wifiLoader","setInterval","scanWifi","then","networks","console","log","selectedConnection","ssid","password","connectToWifi","SSID","selector","template"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKf,QAAMA,MAAM,GAAW,CACrB;AACEC,UAAI,EAAE,EADR;AAEEC,eAAS,EAAE;AAFb,KADqB,CAAvB;;AAWA,QAAaC,2BAA2B;AAAA;AAAA,KAAxC;;AAAaA,+BAA2B,6DAJvC,+DAAS;AACRC,aAAO,EAAE,CAAC,6DAAaC,QAAb,CAAsBL,MAAtB,CAAD,CADD;AAERM,aAAO,EAAE,CAAC,4DAAD;AAFD,KAAT,CAIuC,GAA3BH,2BAA2B,CAA3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGb,QAAaI,oBAAoB;AAAA;AAAA,KAAjC;;AAAaA,wBAAoB,6DAThC,+DAAS;AACRH,aAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,0DAHO,EAIP,sFAJO,CADD;AAORI,kBAAY,EAAE,CAAC,+DAAD;AAPN,KAAT,CASgC,GAApBD,oBAAoB,CAApB;;;;;;;;;;;;;;;;ACnBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQf,QAAaE,cAAc;AAezB,8BACUC,OADV,EAC0B;AAAA;;AAAhB,aAAAA,OAAA,GAAAA,OAAA,CAAgB,CAd1B;;AACA,aAAAC,YAAA,GAAsB,EAAtB,CAa0B,CAR1B;;AACA,aAAAC,OAAA,GAAmB,IAAnB;AACA,aAAAC,WAAA,GAAuB,KAAvB,CAM0B,CAJ1B;;AACA,aAAAC,SAAA,GAAY,yBAAZ;AAIK;;AAjBoB;AAAA;AAAA,mCAmBd;AAAA;;AACT,eAAKC,UAAL,GAAkBC,WAAW,CAAC,YAAM;AAClC,iBAAI,CAACN,OAAL,CAAaO,QAAb,GAAwBC,IAAxB,CAA6B,UAACC,QAAD,EAAgC;AAC3D,mBAAI,CAACR,YAAL,GAAoBQ,QAApB;;AACA,kBAAI,KAAI,CAACR,YAAT,EAAuB;AACrB,qBAAI,CAACC,OAAL,GAAe,KAAf;AACAQ,uBAAO,CAACC,GAAR,CAAY,KAAI,CAACV,YAAjB;AACD;AACF,aAND;AAOD,WAR4B,EAQ1B,IAR0B,CAA7B;AASD;AA7BwB;AAAA;AAAA,gCA+BjBW,kBA/BiB,EA+BG;AAC1B,cAAIC,IAAI,GAAGD,kBAAX;AACA,cAAIE,QAAQ,GAAG,EAAf;AACA,eAAKd,OAAL,CAAae,aAAb,CAA2BF,IAAI,CAACG,IAAhC,EAAsCF,QAAtC,EAAgDN,IAAhD,CAAsD,YAAM;AAC1D;AACAE,mBAAO,CAACC,GAAR,CAAY,WAAZ;AACD,WAHD,WAGU,YAAM;AACZ;AACAD,mBAAO,CAACC,GAAR,CAAY,OAAZ;AACH,WAND;AAOD;AAzCwB;;AAAA;AAAA,OAA3B;;;;cAgBqB;;;;AAhBRZ,kBAAc,6DAL1B,gEAAU;AACTkB,cAAQ,EAAE,gBADD;AAETC,cAAQ,EAAR;AAAA;AAAA,yGAFS;;;;AAAA,KAAV,CAK0B,GAAdnB,cAAc,CAAd","file":"core-operations-operations-module-es5.js","sourcesContent":["export default \"<ion-header mode=\\\"ios\\\" class=\\\"ion-no-border\\\">\\n  <ion-toolbar mode=\\\"ios\\\">\\n    <ion-title>Operations</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content fullscreen>\\n  <div *ngIf=\\\"isSearching\\\">\\n    <ion-spinner name=\\\"crescent\\\" color=\\\"primary\\\"></ion-spinner>\\n  </div>\\n  \\n  <div *ngIf=\\\"!isSearching\\\">\\n    <div *ngIf=\\\"isEmpty\\\" class=\\\"empty-list ion-text-center\\\">\\n      <img [src]=\\\"iconEmpty\\\" class=\\\"empty-img\\\">\\n      <p>No wifi detected in your area</p>\\n    </div>\\n  \\n    <ion-list *ngIf=\\\"!isEmpty\\\" class=\\\"list-core\\\">\\n      <ion-list-header>\\n        <h3>Find WiFi to connect</h3>\\n      </ion-list-header>\\n      <ion-item lines=\\\"none\\\" class=\\\"item-core\\\" *ngFor=\\\"let wifi of scannedWifis\\\">\\n        <ion-icon name=\\\"wifi-outline\\\" slot=\\\"start\\\" color=\\\"primary\\\"></ion-icon>\\n        <ion-label class=\\\"ion-text-wrap\\\">\\n          <h3>{{wifi.SSID}}</h3>\\n          <p>{{wifi.BSSID}}</p>\\n        </ion-label>\\n        <ion-button\\n          slot=\\\"end\\\"\\n          color=\\\"primary\\\"\\n          shape=\\\"round\\\"\\n          mode=\\\"ios\\\"\\n          (click)=\\\"connect(wifi)\\\"\\n        >\\n          Connect\\n        </ion-button>\\n      </ion-item>\\n    </ion-list>\\n  </div>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { OperationsPage } from './operations.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: OperationsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OperationsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { OperationsPageRoutingModule } from './operations-routing.module';\n\nimport { OperationsPage } from './operations.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    OperationsPageRoutingModule\n  ],\n  declarations: [OperationsPage]\n})\nexport class OperationsPageModule {}\n","export default \".empty-list {\\n  margin-top: 3rem;\\n}\\n.empty-list .empty-img {\\n  max-width: 5rem;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zeWFmaXFiYXNyaS9EZXZlbG9wbWVudC9Ta3Vuay9za3Vuay0wMDItemV1cy9tb2JpbGUtb3BlcmF0aW9uL3NyYy9hcHAvY29yZS9vcGVyYXRpb25zL29wZXJhdGlvbnMucGFnZS5zY3NzIiwic3JjL2FwcC9jb3JlL29wZXJhdGlvbnMvb3BlcmF0aW9ucy5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxnQkFBQTtBQ0NKO0FEQUk7RUFDSSxlQUFBO0FDRVIiLCJmaWxlIjoic3JjL2FwcC9jb3JlL29wZXJhdGlvbnMvb3BlcmF0aW9ucy5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZW1wdHktbGlzdCB7XG4gICAgbWFyZ2luLXRvcDogM3JlbTtcbiAgICAuZW1wdHktaW1nIHtcbiAgICAgICAgbWF4LXdpZHRoOiA1cmVtO1xuICAgIH1cbn0iLCIuZW1wdHktbGlzdCB7XG4gIG1hcmdpbi10b3A6IDNyZW07XG59XG4uZW1wdHktbGlzdCAuZW1wdHktaW1nIHtcbiAgbWF4LXdpZHRoOiA1cmVtO1xufSJdfQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { Hotspot, HotspotNetwork } from '@ionic-native/hotspot/ngx';\n\n@Component({\n  selector: 'app-operations',\n  templateUrl: './operations.page.html',\n  styleUrls: ['./operations.page.scss'],\n})\nexport class OperationsPage implements OnInit {\n\n  // Data\n  scannedWifis: any[] = []\n  \n  // Loader\n  wifiLoader: any\n\n  // Checker\n  isEmpty: boolean = true\n  isSearching: boolean = false\n\n  // Icon\n  iconEmpty = 'assets/icon/no-wifi.svg'\n\n  constructor(\n    private hotspot: Hotspot\n  ) { }\n\n  ngOnInit() {\n    this.wifiLoader = setInterval(() => {\n      this.hotspot.scanWifi().then((networks: HotspotNetwork[]) => {\n        this.scannedWifis = networks\n        if (this.scannedWifis) {\n          this.isEmpty = false\n          console.log(this.scannedWifis);\n        }\n      })\n    }, 5000)\n  }\n\n  connect(selectedConnection) {\n    let ssid = selectedConnection\n    let password = ''\n    this.hotspot.connectToWifi(ssid.SSID, password).then( () => {\n      //connection to the WiFi network was successfull\n      console.log('Connected')\n    }).catch( () => {\n        //connection to the WiFi network failed\n        console.log('Error')\n    });\n  }\n\n}\n"]}