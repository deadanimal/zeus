{"version":3,"sources":["webpack:///src/app/core/appliances/appliances.page.html","webpack:///src/app/core/appliances/appliances-routing.module.ts","webpack:///src/app/core/appliances/appliances.module.ts","webpack:///src/app/core/appliances/appliances.page.scss","webpack:///src/app/core/appliances/appliances.page.ts","webpack:///src/app/shared/services/accounts/accounts.service.ts","webpack:///src/app/shared/services/appliances/appliances.service.ts","webpack:///src/app/shared/services/base-appliances/base-appliances.service.ts","webpack:///src/app/shared/services/buildings/buildings.service.ts"],"names":["routes","path","component","AppliancesPageRoutingModule","imports","forChild","exports","AppliancesPageModule","declarations","Temp","id","name","active","account","building","appliance_base","type","AppliancesPage","applianceService","baseService","userService","buildingService","accountService","router","accounts","appliances","bases","buildings","users","accountID","tempAppliance","isListEmpty","iconError","iconAirCond","iconDishwasher","iconFridge","iconLamp","iconLamp1","iconLCD","iconMicrowave","iconToaster","iconDryer","iconAir","iconBlender","iconDeep","iconInduction","iconIron","iconVacuum","iconWater","iconCooker","iconSteamer","iconKettle","getData","get","subscribe","forEach","appliance","push","console","log","splitted","split","tempData","baseAppliances","data","navigationExtras","queryParams","special","JSON","stringify","navigate","selector","template","AccountsService","http","urlAccounts","baseUrl","accountsFiltered","body","post","pipe","res","urlTemp","patch","field","providedIn","AppliancesService","urlAppliances","urlActivity","appliancesFiltered","activities","urlID","BaseAppliancesService","urlBaseAppliances","baseAppliancesFiltered","baseAppliance","BuildingsService","urlBuildings","buildingsFiltered"],"mappings":"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","file":"core-appliances-appliances-module-es5.js","sourcesContent":["export default \"<ion-header mode=\\\"ios\\\" class=\\\"ion-no-border\\\">\\n  <ion-toolbar mode=\\\"ios\\\" color=\\\"primary\\\">\\n    <ion-title>Appliances</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-list mode=\\\"ios\\\" class=\\\"ion-no-margin list-core\\\">\\n    <ion-list-header mode=\\\"ios\\\">\\n      <h3>Registered Appliances</h3>\\n    </ion-list-header>\\n\\n    <div [hidden]=\\\"!isListEmpty\\\">\\n      <img [src]=\\\"iconError\\\" class=\\\"error-img\\\">\\n      <p class=\\\"error-text\\\">No appliances registered</p>\\n    </div>\\n\\n    <ion-item detail *ngFor=\\\"let appliance of tempAppliance\\\" lines=\\\"none\\\" (click)=\\\"view(appliance)\\\">\\n      <ion-avatar slot=\\\"start\\\">\\n        <img *ngIf=\\\"appliance.type == 'TV'\\\" [src]=\\\"iconLCD\\\">\\n        <img *ngIf=\\\"appliance.type == 'Lamp'\\\" [src]=\\\"iconLamp\\\">\\n        <img *ngIf=\\\"appliance.type == 'Light'\\\" [src]=\\\"iconLamp1\\\">\\n        <img *ngIf=\\\"appliance.type == 'Fridge'\\\" [src]=\\\"iconDryer\\\">\\n        <img *ngIf=\\\"appliance.type == 'AC'\\\" [src]=\\\"iconAirCond\\\">\\n        <img *ngIf=\\\"appliance.type == 'Dishwasher'\\\" [src]=\\\"iconDishwasher\\\">\\n        <img *ngIf=\\\"appliance.type == 'Toaster'\\\" [src]=\\\"iconToaster\\\">\\n        <img *ngIf=\\\"appliance.type == 'Dryer'\\\" [src]=\\\"iconDryer\\\">\\n        <img *ngIf=\\\"appliance.type == 'Washing'\\\" [src]=\\\"iconDryer\\\">\\n        <img *ngIf=\\\"appliance.type == 'Microwave'\\\" [src]=\\\"iconMicrowave\\\">\\n        <img *ngIf=\\\"appliance.type == 'Air'\\\" [src]=\\\"iconAir\\\">\\n        <img *ngIf=\\\"appliance.type == 'Deep'\\\" [src]=\\\"iconDeep\\\">\\n        <img *ngIf=\\\"appliance.type == 'Blender'\\\" [src]=\\\"iconBlender\\\">\\n        <img *ngIf=\\\"appliance.type == 'Heater'\\\" [src]=\\\"iconBlender\\\">\\n        <img *ngIf=\\\"appliance.type == 'Induction'\\\" [src]=\\\"iconInduction\\\">\\n        <img *ngIf=\\\"appliance.type == 'Iron'\\\" [src]=\\\"iconIron\\\">\\n        <img *ngIf=\\\"appliance.type == 'Vaccuum'\\\" [src]=\\\"iconVacuum\\\">\\n        <img *ngIf=\\\"appliance.type == 'Water'\\\" [src]=\\\"iconWater\\\">\\n        <img *ngIf=\\\"appliance.type == 'Rice'\\\" [src]=\\\"iconCooker\\\">\\n        <img *ngIf=\\\"appliance.type == 'Pressure'\\\" [src]=\\\"iconCooker\\\">\\n        <img *ngIf=\\\"appliance.type == 'Oven'\\\" [src]=\\\"iconMicrowave\\\">\\n        <img *ngIf=\\\"appliance.type == 'Steamer'\\\" [src]=\\\"iconSteamer\\\">\\n        <img *ngIf=\\\"appliance.type == 'Kettle'\\\" [src]=\\\"iconKettle\\\">\\n      </ion-avatar>\\n\\n      <ion-label class=\\\"ion-text-wrap\\\">\\n        <h2>{{appliance.name}}</h2>\\n        <!-- <p>{{appliance.description}}</p> -->\\n      </ion-label>\\n    </ion-item>\\n\\n  <!-- <ion-item detail lines=\\\"none\\\" (click)=\\\"view()\\\">\\n    <ion-avatar slot=\\\"start\\\">\\n      <img [src]=\\\"iconLCD\\\">\\n    </ion-avatar>\\n\\n    <ion-label class=\\\"ion-text-wrap\\\">\\n      <h2>Name</h2>\\n      <p>Description</p>\\n    </ion-label>\\n\\n    <ion-label slot=\\\"end\\\" class=\\\"ion-text-right\\\">\\n      <ion-badge color=\\\"success\\\">On</ion-badge>\\n      <p>Reading</p>\\n    </ion-label>\\n  </ion-item> -->\\n  </ion-list>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AppliancesPage } from './appliances.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AppliancesPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AppliancesPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AppliancesPageRoutingModule } from './appliances-routing.module';\n\nimport { AppliancesPage } from './appliances.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    AppliancesPageRoutingModule\n  ],\n  declarations: [AppliancesPage]\n})\nexport class AppliancesPageModule {}\n","export default \".error-img {\\n  display: grid;\\n  max-width: 7rem !important;\\n  margin-top: 3rem;\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n\\n.error-text {\\n  color: #9d9fa6;\\n  display: grid;\\n  font-size: 0.9rem;\\n  margin-left: 4rem;\\n  margin-right: 4rem;\\n  text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zeWFmaXFiYXNyaS9EZXZlbG9wbWVudC9Ta3Vuay9za3Vuay0wMDItemV1cy9tb2JpbGUvc3JjL2FwcC9jb3JlL2FwcGxpYW5jZXMvYXBwbGlhbmNlcy5wYWdlLnNjc3MiLCJzcmMvYXBwL2NvcmUvYXBwbGlhbmNlcy9hcHBsaWFuY2VzLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7RUFDQSwwQkFBQTtFQUNBLGdCQUFBO0VBQ0EsaUJBQUE7RUFDQSxrQkFBQTtBQ0NKOztBREVBO0VBQ0ksY0FBQTtFQUNBLGFBQUE7RUFDQSxpQkFBQTtFQUNBLGlCQUFBO0VBQ0Esa0JBQUE7RUFDQSxrQkFBQTtBQ0NKIiwiZmlsZSI6InNyYy9hcHAvY29yZS9hcHBsaWFuY2VzL2FwcGxpYW5jZXMucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmVycm9yLWltZyB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBtYXgtd2lkdGg6IDdyZW0gIWltcG9ydGFudDtcbiAgICBtYXJnaW4tdG9wOiAzcmVtO1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgIG1hcmdpbi1yaWdodDogYXV0bztcbn1cbiAgXG4uZXJyb3ItdGV4dCB7XG4gICAgY29sb3I6ICM5ZDlmYTY7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBmb250LXNpemU6IDAuOXJlbTtcbiAgICBtYXJnaW4tbGVmdDogNHJlbTtcbiAgICBtYXJnaW4tcmlnaHQ6IDRyZW07XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xufSIsIi5lcnJvci1pbWcge1xuICBkaXNwbGF5OiBncmlkO1xuICBtYXgtd2lkdGg6IDdyZW0gIWltcG9ydGFudDtcbiAgbWFyZ2luLXRvcDogM3JlbTtcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gIG1hcmdpbi1yaWdodDogYXV0bztcbn1cblxuLmVycm9yLXRleHQge1xuICBjb2xvcjogIzlkOWZhNjtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZm9udC1zaXplOiAwLjlyZW07XG4gIG1hcmdpbi1sZWZ0OiA0cmVtO1xuICBtYXJnaW4tcmlnaHQ6IDRyZW07XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn0iXX0= */\";","import { Component, OnInit } from '@angular/core';\nimport { AppliancesService } from 'src/app/shared/services/appliances/appliances.service';\nimport { Router, NavigationExtras } from '@angular/router';\n// import { Appliance } from 'src/assets/mock/appliances';\nimport { BaseAppliancesService } from 'src/app/shared/services/base-appliances/base-appliances.service';\nimport { UsersService } from 'src/app/shared/services/users/users.service';\nimport { BuildingsService } from 'src/app/shared/services/buildings/buildings.service';\nimport { AccountsService } from 'src/app/shared/services/accounts/accounts.service';\nimport { Appliance } from 'src/app/shared/services/appliances/appliances.model';\nimport { BaseAppliance } from 'src/app/shared/services/base-appliances/base-appliances.model';\nimport { Account } from 'src/app/shared/services/accounts/accounts.model';\nimport { Building } from 'src/app/shared/services/buildings/buildings.model';\nimport { User } from 'src/app/shared/services/users/users.model';\n\n\nexport class Temp {\n  public id: string\n  public name: string\n  public active: boolean\n  public account: string\n  public building: string\n  public appliance_base: string\n  public type: string\n\n  constructor(\n      id: string,\n      name: string,\n      active: boolean,\n      account: string,\n      building: string,\n      appliance_base: string,\n      type: string\n  ) {\n      this.id = id\n      this.name = name\n      this.active = active\n      this.account = account\n      this.building = building\n      this.appliance_base = appliance_base\n      this.type = type\n  }\n}\n\n\n@Component({\n  selector: 'app-appliances',\n  templateUrl: './appliances.page.html',\n  styleUrls: ['./appliances.page.scss'],\n})\nexport class AppliancesPage implements OnInit {\n\n  // Data\n  accounts: Account[] = []\n  appliances: Appliance[] = []\n  bases: BaseAppliance[] = []\n  buildings: Building[] = []\n  users: User[] = []\n\n\n  accountID = '0cfe1dc3-f224-4e9f-90ad-8a4d2f3c7378'\n\n  tempAppliance: Temp[] = []\n\n  // Checker\n  isListEmpty: boolean = false\n\n  // Icon\n  iconError = 'assets/img/default/404-error.svg'\n  iconAirCond = 'assets/img/appliance/air-conditioner.svg'\n  iconDishwasher = 'assets/img/appliance/dishwasher.svg'\n  iconFridge = 'assets/img/appliance/fridge.svg'\n  iconLamp = 'assets/img/appliance/lamp.svg'\n  iconLamp1 = 'assets/img/appliance/lamp-1.svg'\n  iconLCD = 'assets/img/appliance/lcd.svg'\n  iconMicrowave = 'assets/img/appliance/microwave.svg'\n  iconToaster = 'assets/img/appliance/toaster.svg'\n  iconDryer = 'assets/img/appliance/tumble-dryer.svg'\n  iconAir = 'assets/img/appliance/air.svg'\n  iconBlender = 'assets/img/appliance/blender.svg'\n  iconDeep = 'assets/img/appliance/deep.svg'\n  iconInduction = 'assets/img/appliance/induction.svg'\n  iconIron = 'assets/img/appliance/iron.svg'\n  iconVacuum = 'assets/img/appliance/vacuum.svg'\n  iconWater = 'assets/img/appliance/water-heater.svg'\n  iconCooker = 'assets/img/appliance/rice-cooker.svg'\n  iconSteamer = 'assets/img/appliance/steamer.svg'\n  iconKettle = 'assets/img/appliance/kettle.svg'\n\n  constructor(\n    private applianceService: AppliancesService,\n    private baseService: BaseAppliancesService,\n    private userService: UsersService,\n    private buildingService: BuildingsService,\n    private accountService: AccountsService,\n    private router: Router\n  ) { \n    this.getData()\n  }\n\n  ngOnInit() {\n\n  }\n\n  getData() {\n    this.applianceService.get().subscribe(\n      () => {\n        // this.appliances = this.applianceService.appliances\n        this.applianceService.appliances.forEach(\n          (appliance) => {\n            if (appliance.account == this.accountID) {\n              this.appliances.push(appliance)\n              console.log(this.appliances)\n            }\n          }\n        )\n      },\n      () => {},\n      () => {\n        this.appliances.forEach(\n          (appliance) => {\n            let splitted = appliance.name.split(' ', 2)\n            // console.log('Splitted: ', splitted[1])\n            let tempData = {\n              id: appliance.id,\n              name: appliance.name,\n              active: appliance.active,\n              account: appliance.account,\n              building: appliance.building,\n              appliance_base: appliance.appliance_base,\n              type: splitted[0]\n            }\n            console.log(tempData)\n            this.tempAppliance.push(tempData)\n          }\n        )\n      }\n    )\n\n    this.accountService.get().subscribe(\n      () => {\n        this.accounts = this.accountService.accounts\n      },\n      () => {},\n      () => {}\n    )\n\n    this.baseService.get().subscribe(\n      () => {\n        this.bases = this.baseService.baseAppliances\n      },\n      () => {},\n      () => {}\n    )\n\n    this.buildingService.get().subscribe(\n      () => {\n        this.buildings = this.buildingService.buildings\n      },\n      () => {},\n      () => {}\n    )\n\n    this.userService.get().subscribe(\n      () => {\n        this.users = this.userService.users\n      },\n      () => {},\n      () => {}\n    )\n\n    // this.appliances = Appliance\n    // if (this.appliances.length == 0) {\n    //   this.isListEmpty = true\n    // }\n    // else {\n    //   this.isListEmpty = false\n    // }\n  }\n\n  view(data: any) {\n    let path = '/appliance-detail'\n    let navigationExtras: NavigationExtras = {\n      queryParams: {\n        special: JSON.stringify(data)\n      }\n    }\n    this.router.navigate([path], navigationExtras)\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { Form } from '@angular/forms';\nimport { tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Account } from './accounts.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountsService {\n\n  // URL\n  public urlAccounts: string = environment.baseUrl + 'v1/accounts/'\n\n  // Data\n  public account: Account\n  public accounts: Account[] = []\n  public accountsFiltered: Account[] = []\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  post(body: Form): Observable<Account> {\n    return this.http.post<any>(this.urlAccounts, body).pipe(\n      tap((res) => {\n        console.log('Account: ', res)\n      })\n    )\n  }\n\n  get(): Observable<Account[]> {\n    return this.http.get<Account[]>(this.urlAccounts).pipe(\n      tap((res: Account[]) => {\n        this.accounts = res\n        console.log('Accounts: ', this.accounts)\n      })\n    )\n  }\n\n  getOne(id: string): Observable<Account> {\n    let urlTemp = this.urlAccounts + id + '/'\n    return this.http.get<Account>(urlTemp).pipe(\n      tap((res: Account) => {\n        this.account = res\n        console.log('Account: ', this.account)\n      })\n    )\n  }\n\n  update(id: string, body: Form): Observable<Account> {\n    let urlTemp = this.urlAccounts + id + '/'\n    return this.http.patch<Account>(urlTemp, body).pipe(\n      tap((res) => {\n        this.account = res\n        console.log('Account: ', this.account)\n      })\n    )\n  }\n\n  delete(id: string): Observable<any> {\n    let urlTemp = this.urlAccounts + id + '/'\n    return this.http.delete<any>(urlTemp).pipe(\n      tap((res) => {\n        console.log('Account: ', res)\n      })\n    )\n  }\n\n  filter(field: string): Observable<Account[]> {\n    let urlTemp = this.urlAccounts + '?' + field\n    return this.http.get<Account[]>(urlTemp).pipe(\n      tap((res) => {\n        this.accountsFiltered = res\n        console.log('Accounts filtered: ', this.accountsFiltered)\n      })\n    )\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { Form } from '@angular/forms';\nimport { tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Appliance } from './appliances.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppliancesService {\n\n  // URL\n  public urlAppliances: string = environment.baseUrl + 'v1/appliances/'\n  public urlActivity: string = environment.baseUrl + 'v1/appliance-activities/'\n\n  // Data\n  public appliance: Appliance\n  public appliances: Appliance[] = []\n  public appliancesFiltered: Appliance[] = []\n  public activities: any[] = []\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  post(body: Form): Observable<Appliance> {\n    return this.http.post<any>(this.urlAppliances, body).pipe(\n      tap((res) => {\n        console.log('Appliance: ', res)\n      })\n    )\n  }\n\n  get(): Observable<Appliance[]> {\n    return this.http.get<Appliance[]>(this.urlAppliances).pipe(\n      tap((res: Appliance[]) => {\n        this.appliances = res\n        console.log('Appliances: ', this.appliances)\n      })\n    )\n  }\n\n  getOne(id: string): Observable<Appliance> {\n   let urlID = this.urlAppliances + id + '/'\n   return this.http.get<Appliance>(urlID).pipe(\n     tap((res: Appliance) => {\n      this.appliance = res\n       console.log('Appliance: ', this.appliance)\n     })\n   )\n }\n\n  update(id: string, body: Form): Observable<Appliance> {\n    let urlTemp = this.urlAppliances + id + '/'\n    return this.http.patch<Appliance>(urlTemp, body).pipe(\n      tap((res) => {\n        this.appliance = res\n        console.log('Appliance: ', this.appliance)\n      })\n    )\n  }\n\n  delete(id: string): Observable<any> {\n    return this.http.delete<any>(this.urlAppliances + id + '/').pipe(\n      tap((res) => {\n        console.log('Appliance: ', res)\n      })\n    )\n  }\n\n  filter(field: string): Observable<Appliance[]> {\n    let urlTemp = this.urlAppliances + '?' + field\n    return this.http.get<Appliance[]>(urlTemp).pipe(\n      tap((res) => {\n        this.appliancesFiltered = res\n        console.log('Appliances filtered: ', this.appliancesFiltered)\n      })\n    )\n  }\n\n  getActivity(): Observable<any[]> {\n    return this.http.get<any[]>(this.urlActivity).pipe(\n      tap((res: any[]) => {\n        this.activities = res\n        console.log('Activity: ', this.activities)\n      })\n    )\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { Form } from '@angular/forms';\nimport { tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { BaseAppliance } from './base-appliances.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BaseAppliancesService {\n\n  // URL\n  public urlBaseAppliances: string = environment.baseUrl + 'v1/base-appliances/'\n\n  // Data\n  public baseAppliance: BaseAppliance\n  public baseAppliances: BaseAppliance[] = []\n  public baseAppliancesFiltered: BaseAppliance[] = []\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  post(body: Form): Observable<BaseAppliance> {\n    return this.http.post<any>(this.urlBaseAppliances, body).pipe(\n      tap((res) => {\n        console.log('Appliance: ', res)\n      })\n    )\n  }\n\n  get(): Observable<BaseAppliance[]> {\n    return this.http.get<BaseAppliance[]>(this.urlBaseAppliances).pipe(\n      tap((res: BaseAppliance[]) => {\n        this.baseAppliances = res\n        console.log('Base appliances: ', this.baseAppliances)\n      })\n    )\n  }\n\n  getOne(id: string): Observable<BaseAppliance> {\n    let urlTemp = this.urlBaseAppliances + id + '/'\n    return this.http.get<BaseAppliance>(urlTemp).pipe(\n      tap((res: BaseAppliance) => {\n        this.baseAppliance = res\n        console.log('Base appliance: ', this.baseAppliance)\n      })\n    )\n  }\n\n  update(id: string, body: Form): Observable<BaseAppliance> {\n    let urlTemp = this.urlBaseAppliances + id + '/'\n    return this.http.patch<BaseAppliance>(urlTemp, body).pipe(\n      tap((res) => {\n        console.log('Appliance: ', res)\n      })\n    )\n  }\n\n  delete(id: string): Observable<any> {\n    let urlTemp = this.urlBaseAppliances + id + '/'\n    return this.http.delete<any>(urlTemp).pipe(\n      tap((res) => {\n        console.log('Appliance: ', res)\n      })\n    )\n  }\n\n  filter(field: string): Observable<BaseAppliance[]> {\n    let urlTemp = this.urlBaseAppliances + '?' + field\n    return this.http.get<BaseAppliance[]>(urlTemp).pipe(\n      tap((res) => {\n        this.baseAppliancesFiltered = res\n        console.log('Base appliances filtered: ', this.baseAppliancesFiltered)\n      })\n    )\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { Form } from '@angular/forms';\nimport { tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Building } from './buildings.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BuildingsService {\n\n  // URL\n  public urlBuildings: string = environment.baseUrl + 'v1/buildings/'\n\n  // Data\n  public building: Building\n  public buildings: Building[] = []\n  public buildingsFiltered: Building[] = []\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  post(body: Form): Observable<Building> {\n    return this.http.post<any>(this.urlBuildings, body).pipe(\n      tap((res) => {\n        console.log('Building: ', res)\n      })\n    )\n  }\n\n  get(): Observable<Building[]> {\n    return this.http.get<Building[]>(this.urlBuildings).pipe(\n      tap((res: Building[]) => {\n        this.buildings = res\n        console.log('Buildings: ', this.buildings)\n      })\n    )\n  }\n\n  getOne(id: string): Observable<Building> {\n    let urlTemp = this.urlBuildings + id + '/'\n    return this.http.get<Building>(urlTemp).pipe(\n      tap((res: Building) => {\n        this.building = res\n        console.log('Building: ', this.building)\n      })\n    )\n  }\n\n  update(id: string, body: Form): Observable<Building> {\n    let urlTemp = this.urlBuildings + id + '/'\n    return this.http.patch<Building>(urlTemp, body).pipe(\n      tap((res) => {\n        console.log('Building: ', res)\n      })\n    )\n  }\n\n  delete(id: string): Observable<any> {\n    let urlTemp = this.urlBuildings + id + '/'\n    return this.http.delete<any>(urlTemp).pipe(\n      tap((res) => {\n        console.log('Building: ', res)\n      })\n    )\n  }\n\n  filter(field: string): Observable<Building[]> {\n    let urlTemp = this.urlBuildings + '?' + field\n    return this.http.get<Building[]>(urlTemp).pipe(\n      tap((res) => {\n        this.buildingsFiltered = res\n        console.log('Buildings filtered: ', this.buildingsFiltered)\n      })\n    )\n  }\n\n}\n"]}